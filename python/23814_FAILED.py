"""
문제
모두가 짜장면과 짬뽕을 외칠 때 어떤 사람들은 볶음밥을 원한다.
하지만 지금 주문할 음식점에서는 같은 메뉴 D개당 군만두 서비스를 주므로, 짜장면이나 짬뽕을 시키면 더 받을 수 있는 군만두를 볶음밥을 시켰다가 받지 못하게 되면 불만이다.
현재 N명이 짜장면, M명이 짬뽕을 이미 주문하였다.
남은 K명이 짜장면, 짬뽕, 볶음밥 중 하나를 주문할 수 있을 때 전체 N + M + K명이 받는 군만두의 개수를 최대로 하며 시킬 수 있는 볶음밥의 최대 개수는 몇 개인가?

입력
첫 번째 줄에는 군만두 서비스를 제공하는 주문 수 D (1 <= D <= 10^18)가 주어진다.

두 번째 줄에는 짜장면, 짬뽕을 시킨 사람의 수 N, M과 남은 사람의 수 K가 주어진다 
(1 <= N, M, K <= 10^18).

출력
군만두를 가장 많이 받을 수 있으면서 주문할 수 있는 볶음밥의 최대 개수를 출력해라.
입력되는 정수의 범위가 넓어 32비트 정수형으로 처리할 수 없음에 유의하라.

모든 경우를 고려해볼 때 최대로 받을 수 있는 군만두의 개수는 5개이므로 5개를 받을 수 있도록 주문해야 한다. 볶음밥 10개를 추가로 주문하면 군만두를 0 + 1 + 3 = 4개 받을 수 있으므로 적합하지 않고, 볶음밥 9개와 짜장면 1개를 추가로 주문하면 군만두를 1 + 1 + 3 = 5개 받을 수 있어 최대로 주문할 수 있는 볶음밥은 9개이다.

3
2 4 10

9
"""
import sys

input = sys.stdin.readline

d = int(input())
n,m,k = map(int, input().split())

cnt = n // d + m // d + k // d
max_k = k

f1 = (n // d + 1) * d - n
if n % d != 0 and k - f1 >= 0:
    if cnt == n // d + 1 + m // d + (k - f1) // d:
        max_k = max(max_k, k - f1)
    elif cnt < n // d + 1 + m // d + (k - f1) // d:
        cnt = n // d + 1 + m // d + (k - f1) // d
        max_k = k - f1

f2 = (m // d + 1) * d - m
if m % d != 0 and k - f2 >= 0:
    if cnt == n // d + m // d + 1 + (k - f2) // d:
        max_k = max(max_k, k - f2)
    elif cnt < n // d + m // d + 1 + (k - f2) // d:
        cnt = n // d + m // d + 1 + (k - f2) // d
        max_k = k - f2

f3 = f1 + f2
if n % d != 0 and m % d != 0 and k - f3 >= 0:
    if cnt == n // d + 1 + m // d + 1 + (k - f3) // d:
        max_k = max(max_k, k - f3)
    elif cnt < n // d + 1 + m // d + 1 + (k - f3) // d:
        cnt = n // d + 1 + m // d + 1 + (k - f3) // d
        max_k = k - f3

print(max_k)